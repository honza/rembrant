// Generated by CoffeeScript 1.3.1
(function() {
  var Photo, Rembrant, async, baseTemplate, eco, exec, exif, fs, library, path, rename, spawn, startApp, thumb, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  async = require('async');

  eco = require('eco');

  thumb = require('./thumbnail').thumb;

  Photo = require('./photo').Photo;

  exif = require('./exif');

  rename = require('./rename');

  baseTemplate = fs.readFileSync(__dirname + "/../views/base.html", "utf-8");

  library = {
    source: 'test-photos',
    cache: 'cache',
    lastModified: '',
    awsKey: '',
    awsSecret: '',
    awsBucket: '',
    photos: [],
    albums: [
      {
        id: 1,
        name: 'Unsorted'
      }
    ]
  };

  Rembrant = (function() {

    Rembrant.name = 'Rembrant';

    function Rembrant(filename, cwd) {
      var photo, photos, _i, _len, _ref1;
      this.cwd = cwd;
      if (!path.existsSync(filename)) {
        console.log("Path doesn't exist, creating...");
        this.createLibrary();
        return;
      }
      this.library = fs.readFileSync(filename, 'utf-8');
      this.library = JSON.parse(this.library);
      photos = [];
      _ref1 = this.library.photos;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        photo = _ref1[_i];
        photos.push(Photo.fromJSON(photo));
      }
      this.library.photos = photos;
    }

    Rembrant.prototype.makeThumbs = function() {
      thumb({
        source: this.library.source,
        destination: this.library.cache,
        suffix: '_800',
        concurrency: 4,
        width: 800
      }, function() {
        return console.log('done');
      });
      return thumb({
        source: this.library.source,
        destination: this.library.cache,
        suffix: '_100',
        concurrency: 4,
        width: 100
      }, function() {
        return console.log('done');
      });
    };

    Rembrant.prototype.createLibrary = function() {
      var string;
      string = JSON.stringify(library);
      return fs.writeFileSync('library.json', string);
    };

    Rembrant.prototype.importPhotos = function() {
      var file, files, libraryFilenames, photos, _i, _len;
      files = fs.readdirSync(this.library.source);
      photos = this.library.photos || [];
      libraryFilenames = _.reject(files, function(file) {
        var e;
        e = path.extname(file);
        return e !== '.jpg';
      });
      for (_i = 0, _len = libraryFilenames.length; _i < _len; _i++) {
        file = libraryFilenames[_i];
        if (__indexOf.call(photos, file) < 0) {
          photos.push(new Photo(file, this.library.source));
        }
      }
      this.library.photos = photos;
      this.ensureExif();
      return this.makeThumbs();
    };

    Rembrant.prototype.ensureExif = function() {
      var _this = this;
      return async.concatSeries(this.library.photos, exif.readExifImage, function(err, list) {
        console.log('done');
        return _this.save();
      });
    };

    Rembrant.prototype.scan = function() {
      var file, files, newFiles, _i, _len, _results;
      files = fs.readdirSync(this.library.source);
      newFiles = _.difference(files, _.pluck(this.library.photos, 'filename'));
      _results = [];
      for (_i = 0, _len = newFiles.length; _i < _len; _i++) {
        file = newFiles[_i];
        console.log(file);
        _results.push(this.library.photos.push(new Photo(file)));
      }
      return _results;
    };

    Rembrant.prototype.save = function() {
      var string;
      this.library.lastModified = '';
      string = JSON.stringify(this.library);
      return fs.writeFileSync('library.json', string);
    };

    Rembrant.prototype.imagesByDate = function() {
      return _.sortBy(this.library.photos, function(image) {
        return image.exif['Exif.Photo.DateTimeOriginal'];
      });
    };

    Rembrant.prototype.generateIndex = function() {
      var html, template;
      template = fs.readFileSync(__dirname + "/../views/front.html", "utf-8");
      html = eco.render(template, {
        albums: this.library.albums
      });
      return this.finalizeFile(html, 'build/index.html');
    };

    Rembrant.prototype.generateAlbums = function() {
      var album, html, photos, template, _i, _len, _ref1;
      template = fs.readFileSync(__dirname + "/../views/index.html", "utf-8");
      _ref1 = this.library.albums;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        album = _ref1[_i];
        photos = _.filter(this.library.photos, function(p) {
          var _ref2;
          return _ref2 = album.id, __indexOf.call(p.albums, _ref2) >= 0;
        });
        html = eco.render(template, {
          photos: photos
        });
        this.finalizeFile(html, "/../build/album-" + album.id + ".html");
      }
      html = eco.render(template, {
        photos: this.library.photos
      });
      return this.finalizeFile(html, '/../build/all.html');
    };

    Rembrant.prototype.generatePages = function() {
      var html, photo, template, _i, _len, _ref1, _results;
      template = fs.readFileSync(__dirname + "/../views/single.html", "utf-8");
      _ref1 = this.library.photos;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        photo = _ref1[_i];
        html = eco.render(template, {
          photo: photo
        });
        _results.push(this.finalizeFile(html, "/../build/" + (photo.getHtmlName())));
      }
      return _results;
    };

    Rembrant.prototype.finalizeFile = function(content, filename) {
      var rendered;
      rendered = eco.render(baseTemplate, {
        content: content
      });
      return fs.writeFileSync(filename, rendered);
    };

    Rembrant.prototype.normalize = function() {
      return rename.renameFilesInDirectory(this.library.source, function() {
        return console.log('done');
      });
    };

    Rembrant.prototype["export"] = function() {
      this.generateIndex;
      this.generateAlbums;
      return this.generatePages;
    };

    return Rembrant;

  })();

  startApp = function(rembrant, importPath) {
    var app, express, importer, routes;
    express = require("express");
    app = express.createServer(express.bodyParser(), express.cookieParser(), express.session({
      secret: "cvfrFRQW352rrvf4132"
    }));
    app.configure(function() {
      this.set('views', __dirname + '/../views');
      this.set('view engine', 'jade');
      app.use(express["static"](__dirname + '/../public'));
      return this.use(this.router);
    });
    routes = {
      index: function(req, res) {
        var photos;
        photos = _.clone(rembrant.library.photos);
        return res.render('index', {
          title: 'Rembrant',
          photos: photos.reverse()
        });
      },
      image: function(req, res) {
        var filename, p;
        filename = req.params.filename;
        p = "" + rembrant.cwd + "/" + rembrant.library.cache + "/" + filename;
        return fs.readFile(p, "binary", function(err, data) {
          return res.end(data, 'binary');
        });
      }
    };
    app.get('/', routes.index);
    app.get('/image/:filename', routes.image);
    if (importPath) {
      importer = require('./importer').main(app, importPath);
    }
    console.log('Serving http://localhost:8888');
    return app.listen(8888);
  };

  exports.runFromCli = function() {
    var imagePath, program, rembrant;
    program = require('commander');
    program.version('0.0.1');
    program.option('-i, --import [path]');
    program.option('-s, --scan');
    program.option('-e, --export');
    program.option('-t, --thumbs');
    program.option('-n, --rename');
    program.option('-r, --serve');
    program.parse(process.argv);
    rembrant = new Rembrant('library.json', process.cwd());
    if (program.thumbs) {
      rembrant.makeThumbs();
    }
    if (program["export"]) {
      rembrant["export"]();
    }
    if (program["import"] && program["import"] === true) {
      rembrant.importPhotos;
    }
    if (program["import"] && program["import"] !== true) {
      imagePath = program["import"];
      startApp(rembrant, imagePath);
    }
    if (program.rename) {
      rembrant.normalize();
    }
    if (program.serve) {
      return startApp(rembrant);
    }
  };

}).call(this);
