// Generated by CoffeeScript 1.3.1
(function() {
  var Photo, async, baseTemplate, copyFilesToDone, createDoneDir, createTmpDir, eco, exec, fs, getImages, getTemplate, hasThumbs, imagesOnly, path, renameAllPhotos, renameFilesInDirectory, render, thumb, verifyImportPath, _;

  fs = require('fs');

  path = require('path');

  eco = require('eco');

  _ = require('underscore');

  thumb = require('./thumbnail').thumb;

  async = require('async');

  exec = require('child_process').exec;

  renameFilesInDirectory = require('./rename').renameFilesInDirectory;

  Photo = (function() {

    Photo.name = 'Photo';

    function Photo(filename) {
      var base, ext;
      this.filename = filename;
      ext = path.extname(this.filename);
      base = path.basename(this.filename, ext);
      this.thumb = "" + base + "_800" + ext;
    }

    return Photo;

  })();

  getTemplate = function(name) {
    return fs.readFileSync(__dirname + ("/../views/ui/" + name + ".html"), "utf-8");
  };

  baseTemplate = getTemplate('base');

  render = function(template, values) {
    var content;
    if (values == null) {
      values = {};
    }
    content = eco.render(getTemplate(template), values);
    return eco.render(baseTemplate, {
      content: content
    });
  };

  verifyImportPath = function(imagePath) {
    var p;
    if (imagePath[0] === '~' || imagePath[0] === '/') {
      p = imagePath;
    } else {
      p = __dirname + "/../" + imagePath;
    }
    if (!path.existsSync(p)) {
      return false;
    } else {
      return p;
    }
  };

  createTmpDir = function(importPath) {
    if (!path.existsSync(importPath + "/tmp")) {
      return fs.mkdirSync(importPath + "/tmp");
    }
  };

  createDoneDir = function(importPath) {
    if (!path.existsSync(importPath + "/done")) {
      return fs.mkdirSync(importPath + "/done");
    }
  };

  imagesOnly = function(files) {
    return _.reject(files, function(file) {
      var e;
      e = path.extname(file);
      return e !== '.jpg' && e !== '.JPG';
    });
  };

  getImages = function(importPath) {
    return imagesOnly(fs.readdirSync(importPath));
  };

  hasThumbs = function(importPath) {
    var files;
    files = imagesOnly(fs.readdirSync(importPath + "/tmp"));
    if (files.length > 0) {
      return true;
    } else {
      return false;
    }
  };

  copyFilesToDone = function(filenames, importPath, callback) {
    var fn, options, q, _i, _len, _results;
    options = {
      cwd: importPath
    };
    q = async.queue(function(task, callback) {
      return exec(task.command, options, function(err, stdout, stderr) {
        return callback();
      });
    }, 10);
    q.drain = function() {
      return callback();
    };
    _results = [];
    for (_i = 0, _len = filenames.length; _i < _len; _i++) {
      fn = filenames[_i];
      _results.push(q.push({
        command: "cp " + fn + " done/" + fn
      }, function() {}));
    }
    return _results;
  };

  renameAllPhotos = function(importPath, callback) {
    return renameFilesInDirectory(importPath + "/done", function() {
      return callback();
    });
  };

  exports.main = function(app, importPath) {
    importPath = verifyImportPath(importPath);
    if (!importPath) {
      throw 'Invalid path';
      return;
    }
    createTmpDir(importPath);
    if (!hasThumbs(importPath)) {
      thumb({
        source: importPath,
        destination: importPath + "/tmp",
        suffix: '_800',
        concurrency: 4,
        width: 800
      }, function() {
        return console.log('http://localhost:8888/importer');
      });
    }
    app.get('/importer', function(req, res) {
      var f, files, html;
      files = getImages(importPath);
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          f = files[_i];
          _results.push(new Photo(f));
        }
        return _results;
      })();
      html = render('importer', {
        files: files
      });
      return res.send(html);
    });
    app.post('/importer/finish', function(req, res) {
      var filenames;
      filenames = req.body.ids;
      createDoneDir(importPath);
      return copyFilesToDone(filenames, importPath, function() {
        return renameAllPhotos(importPath, function() {
          return res.send('OK');
        });
      });
    });
    return app.get('/importer/image/:filename', function(req, res) {
      var filename, p;
      filename = req.params.filename;
      p = importPath + "/tmp/" + filename;
      return fs.readFile(p, "binary", function(err, data) {
        return res.end(data, 'binary');
      });
    });
  };

}).call(this);
