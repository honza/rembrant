// Generated by CoffeeScript 1.3.1
(function() {
  var GalleryView, Photo, PhotoCollection, PhotoView, Router, app, cookie, getIsSmallCookie, photoCount, router, setIsSmallCookie,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  app = null;

  router = null;

  cookie = {
    isSmall: 'photoGalleryIsSmall'
  };

  photoCount = 200;

  setIsSmallCookie = function(bool) {
    var value;
    if (bool) {
      value = '1';
    } else {
      value = '0';
    }
    return $.cookie(cookie.isSmall, value);
  };

  getIsSmallCookie = function() {
    return $.cookie(cookie.isSmall) === '1';
  };

  Photo = (function(_super) {

    __extends(Photo, _super);

    Photo.name = 'Photo';

    function Photo() {
      return Photo.__super__.constructor.apply(this, arguments);
    }

    Photo.prototype.thumb = function(size) {
      return "" + (this.get('filename').split('.')[0]) + "_" + size + ".jpg";
    };

    return Photo;

  })(Backbone.Model);

  PhotoCollection = (function(_super) {

    __extends(PhotoCollection, _super);

    PhotoCollection.name = 'PhotoCollection';

    function PhotoCollection() {
      return PhotoCollection.__super__.constructor.apply(this, arguments);
    }

    PhotoCollection.prototype.model = Photo;

    return PhotoCollection;

  })(Backbone.Collection);

  PhotoView = (function(_super) {

    __extends(PhotoView, _super);

    PhotoView.name = 'PhotoView';

    function PhotoView() {
      return PhotoView.__super__.constructor.apply(this, arguments);
    }

    PhotoView.prototype.events = {
      'click a': 'click'
    };

    PhotoView.prototype.click = function() {
      return router.navigate("i/" + (this.model.get('filename')), {
        trigger: true
      });
    };

    PhotoView.prototype.render = function(isThumb) {
      var span, url;
      if (isThumb) {
        span = "span2";
        url = "" + (this.model.thumb(160));
      } else {
        span = "span12";
        url = "" + (this.model.thumb(930));
      }
      return this.$el.html("<div class=\"" + span + "\">\n    <a href=\"javascript:;\" class=\"thumbnail\">\n        <img src=\"" + url + "\" />\n    </a>\n</div>");
    };

    return PhotoView;

  })(Backbone.View);

  GalleryView = (function(_super) {

    __extends(GalleryView, _super);

    GalleryView.name = 'GalleryView';

    function GalleryView() {
      return GalleryView.__super__.constructor.apply(this, arguments);
    }

    GalleryView.prototype.events = {
      'click #big': 'showBig',
      'click #small': 'showSmall',
      'click .pagination a': 'clickPage'
    };

    GalleryView.prototype.initialize = function() {
      this.photoCollection = new PhotoCollection(data.photos);
      this.$el = $('#root');
      this.$photos = $('#photos');
      return this.isSmall = getIsSmallCookie();
    };

    GalleryView.prototype.clickPage = function(e) {
      var page;
      page = e.srcElement.innerText;
      router.navigate("p/" + page, {
        trigger: true
      });
      return false;
    };

    GalleryView.prototype.render = function() {
      return this.renderPage(1);
    };

    GalleryView.prototype.renderSingle = function(filename) {
      var i, view;
      i = this.photoCollection.find(function(photo) {
        return filename === photo.get('filename');
      });
      if (!i) {
        return this.$photos.html("<h1>Not Found</h1>");
      }
      view = new PhotoView({
        model: i
      });
      this.$photos.empty();
      return this.$photos.append(view.render(false));
    };

    GalleryView.prototype.renderPage = function(number) {
      var counter, end, latest, pagination, photo, start, total, view, _i, _len;
      if (!number) {
        number = this.page;
      }
      number = parseInt(number);
      this.page = number;
      this.$photos.empty();
      latest = this.photoCollection.models;
      if (number === 1) {
        end = latest.length;
        start = end - photoCount;
      } else {
        end = latest.length - (photoCount * (number - 1)) - 1;
        start = end - photoCount;
      }
      if (start < 0) {
        start = 0;
      }
      latest = latest.slice(start, end + 1 || 9e9).reverse();
      for (_i = 0, _len = latest.length; _i < _len; _i++) {
        photo = latest[_i];
        view = new PhotoView({
          model: photo
        });
        this.$photos.append(view.render(this.isSmall));
      }
      pagination = $('.pagination ul');
      pagination.empty();
      total = this.photoCollection.models.length / photoCount;
      counter = 1;
      return _.times(total, function() {
        var html;
        if (counter === number) {
          html = "<li class=\"active\"><a href=\"javascript:;\">" + counter + "</a></li>";
        } else {
          html = "<li><a href=\"javascript:;\">" + counter + "</a></li>";
        }
        pagination.append(html);
        return counter++;
      });
    };

    GalleryView.prototype.showBig = function() {
      this.isSmall = false;
      setIsSmallCookie(false);
      return this.renderPage();
    };

    GalleryView.prototype.showSmall = function() {
      this.isSmall = true;
      setIsSmallCookie(true);
      return this.renderPage();
    };

    return GalleryView;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    Router.name = 'Router';

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function(options) {
      return this.app = options.app;
    };

    Router.prototype.routes = {
      '': 'root',
      'i/:filename': 'image',
      'p/:number': 'page'
    };

    Router.prototype.root = function() {
      return this.app.render();
    };

    Router.prototype.image = function(image) {
      return this.app.renderSingle(image);
    };

    Router.prototype.page = function(number) {
      return this.app.renderPage(number);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    app = new GalleryView;
    router = new Router({
      app: app
    });
    return Backbone.history.start();
  });

}).call(this);
