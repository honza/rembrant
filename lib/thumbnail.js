// Generated by CoffeeScript 1.3.1
(function() {
  var async, createQueue, crypto, defaults, extensions, fs, im, path, run, _;

  fs = require('fs');

  path = require('path');

  crypto = require('crypto');

  im = require('imagemagick');

  async = require('async');

  _ = require('underscore');

  defaults = {
    suffix: '_thumb',
    digest: false,
    hashingType: 'sha1',
    width: 800,
    concurrency: 2
  };

  extensions = ['.jpg', '.jpeg', '.JPG', '.JPEG', '.png', '.PNG'];

  createQueue = function(settings) {
    var queue;
    queue = async.queue(function(task, callback) {
      var base, ext, hash, name, stream;
      if (settings.digest) {
        hash = crypto.createHash(settings.hashingType);
        stream = fs.ReadStream(task.options.srcPath);
        stream.on('data', function(d) {
          return hash.update(d);
        });
        return stream.on('end', function() {
          var d;
          d = hash.digest('hex');
          task.options.dstPath = settings.destination + '/' + d + '_' + settings.width + path.extname(task.options.srcPath);
          return im.resize(task.options, function(err, stdout, stderr) {
            return callback();
          });
        });
      } else {
        name = task.options.srcPath;
        ext = path.extname(name);
        base = path.basename(name, ext);
        task.options.dstPath = settings.destination + '/' + base + settings.suffix + ext;
        return im.resize(task.options, function(err, stdout, stderr) {
          return callback();
        });
      }
    }, settings.concurrency);
    queue.drain = function() {
      if (settings.done) {
        return settings.done();
      } else {
        return console.log('all items have been processed');
      }
    };
    return queue;
  };

  run = function(settings) {
    var image, images, options, queue, _i, _len, _results;
    images = fs.readdirSync(settings.source);
    images = _.reject(images, function(file) {
      return _.indexOf(extensions, path.extname(file)) === -1;
    });
    queue = createQueue(settings);
    _results = [];
    for (_i = 0, _len = images.length; _i < _len; _i++) {
      image = images[_i];
      options = {
        srcPath: settings.source + '/' + image,
        width: settings.width
      };
      _results.push(queue.push({
        options: options
      }, function() {
        return console.log(image);
      }));
    }
    return _results;
  };

  exports.thumb = function(options, callback) {
    var done, settings;
    if (options.args) {
      if (options.args.length !== 2) {
        console.log('Please provide a source and destination directories.');
        return;
      }
      options.source = options.args[0];
      options.destination = options.args[1];
    }
    if (path.existsSync(options.source) && path.existsSync(options.destination)) {
      settings = _.defaults(options, defaults);
    } else {
      console.log("Origin or destination doesn't exist.");
      return;
    }
    if (callback) {
      done = callback;
    }
    return run(settings);
  };

}).call(this);
